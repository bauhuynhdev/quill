{"version":3,"file":"code.js","names":["Block","Break","Cursor","Inline","TextBlot","escapeText","Container","Quill","CodeBlockContainer","create","value","domNode","setAttribute","code","index","length","children","map","child","innerText","join","slice","html","CodeBlock","TAB","register","Code","blotName","tagName","className","allowedChildren","requiredContainer","default"],"sources":["../../src/formats/code.ts"],"sourcesContent":["import Block from '../blots/block.js';\r\nimport Break from '../blots/break.js';\r\nimport Cursor from '../blots/cursor.js';\r\nimport Inline from '../blots/inline.js';\r\nimport TextBlot, { escapeText } from '../blots/text.js';\r\nimport Container from '../blots/container.js';\r\nimport Quill from '../core/quill.js';\r\n\r\nclass CodeBlockContainer extends Container {\r\n  static create(value: string) {\r\n    const domNode = super.create(value) as Element;\r\n    domNode.setAttribute('spellcheck', 'false');\r\n    return domNode;\r\n  }\r\n\r\n  code(index: number, length: number) {\r\n    return (\r\n      this.children\r\n        // @ts-expect-error\r\n        .map((child) => (child.length() <= 1 ? '' : child.domNode.innerText))\r\n        .join('\\n')\r\n        .slice(index, index + length)\r\n    );\r\n  }\r\n\r\n  html(index: number, length: number) {\r\n    // `\\n`s are needed in order to support empty lines at the beginning and the end.\r\n    // https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\r\n    return `<pre>\\n${escapeText(this.code(index, length))}\\n</pre>`;\r\n  }\r\n}\r\n\r\nclass CodeBlock extends Block {\r\n  static TAB = '  ';\r\n\r\n  static register() {\r\n    Quill.register(CodeBlockContainer);\r\n  }\r\n}\r\n\r\nclass Code extends Inline {}\r\nCode.blotName = 'code';\r\nCode.tagName = 'CODE';\r\n\r\nCodeBlock.blotName = 'code-block';\r\nCodeBlock.className = 'ql-code-block';\r\nCodeBlock.tagName = 'DIV';\r\nCodeBlockContainer.blotName = 'code-block-container';\r\nCodeBlockContainer.className = 'ql-code-block-container';\r\nCodeBlockContainer.tagName = 'DIV';\r\n\r\nCodeBlockContainer.allowedChildren = [CodeBlock];\r\n\r\nCodeBlock.allowedChildren = [TextBlot, Break, Cursor];\r\nCodeBlock.requiredContainer = CodeBlockContainer;\r\n\r\nexport { Code, CodeBlockContainer, CodeBlock as default };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,mBAAmB;AACrC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,QAAQ,IAAIC,UAAU,QAAQ,kBAAkB;AACvD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,KAAK,MAAM,kBAAkB;AAEpC,MAAMC,kBAAkB,SAASF,SAAS,CAAC;EACzC,OAAOG,MAAMA,CAACC,KAAa,EAAE;IAC3B,MAAMC,OAAO,GAAG,KAAK,CAACF,MAAM,CAACC,KAAK,CAAY;IAC9CC,OAAO,CAACC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC;IAC3C,OAAOD,OAAO;EAChB;EAEAE,IAAIA,CAACC,KAAa,EAAEC,MAAc,EAAE;IAClC,OACE,IAAI,CAACC;IACH;IAAA,CACCC,GAAG,CAAEC,KAAK,IAAMA,KAAK,CAACH,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAGG,KAAK,CAACP,OAAO,CAACQ,SAAU,CAAC,CACpEC,IAAI,CAAC,IAAI,CAAC,CACVC,KAAK,CAACP,KAAK,EAAEA,KAAK,GAAGC,MAAM,CAAC;EAEnC;EAEAO,IAAIA,CAACR,KAAa,EAAEC,MAAc,EAAE;IAClC;IACA;IACA,OAAQ,UAASV,UAAU,CAAC,IAAI,CAACQ,IAAI,CAACC,KAAK,EAAEC,MAAM,CAAC,CAAE,UAAS;EACjE;AACF;AAEA,MAAMQ,SAAS,SAASvB,KAAK,CAAC;EAC5B,OAAOwB,GAAG,GAAG,IAAI;EAEjB,OAAOC,QAAQA,CAAA,EAAG;IAChBlB,KAAK,CAACkB,QAAQ,CAACjB,kBAAkB,CAAC;EACpC;AACF;AAEA,MAAMkB,IAAI,SAASvB,MAAM,CAAC;AAC1BuB,IAAI,CAACC,QAAQ,GAAG,MAAM;AACtBD,IAAI,CAACE,OAAO,GAAG,MAAM;AAErBL,SAAS,CAACI,QAAQ,GAAG,YAAY;AACjCJ,SAAS,CAACM,SAAS,GAAG,eAAe;AACrCN,SAAS,CAACK,OAAO,GAAG,KAAK;AACzBpB,kBAAkB,CAACmB,QAAQ,GAAG,sBAAsB;AACpDnB,kBAAkB,CAACqB,SAAS,GAAG,yBAAyB;AACxDrB,kBAAkB,CAACoB,OAAO,GAAG,KAAK;AAElCpB,kBAAkB,CAACsB,eAAe,GAAG,CAACP,SAAS,CAAC;AAEhDA,SAAS,CAACO,eAAe,GAAG,CAAC1B,QAAQ,EAAEH,KAAK,EAAEC,MAAM,CAAC;AACrDqB,SAAS,CAACQ,iBAAiB,GAAGvB,kBAAkB;AAEhD,SAASkB,IAAI,EAAElB,kBAAkB,EAAEe,SAAS,IAAIS,OAAO","ignoreList":[]}