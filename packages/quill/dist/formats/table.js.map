{"version":3,"file":"table.js","names":["Block","Container","TableCell","blotName","tagName","create","value","node","setAttribute","tableId","formats","domNode","hasAttribute","getAttribute","undefined","cellOffset","parent","children","indexOf","format","name","row","rowOffset","table","TableRow","checkMerge","next","head","thisHead","thisTail","tail","nextHead","nextTail","optimize","context","forEach","child","childFormats","nextFormats","splitAfter","prev","TableBody","TableContainer","balanceCells","rows","descendants","maxColumns","reduce","max","Math","length","Array","fill","blot","scroll","appendChild","cells","column","map","at","deleteColumn","index","body","descendant","cell","remove","insertColumn","ref","insertBefore","insertRow","id","allowedChildren","requiredContainer","random","toString","slice"],"sources":["../../src/formats/table.ts"],"sourcesContent":["import type { LinkedList } from 'parchment';\r\nimport Block from '../blots/block.js';\r\nimport Container from '../blots/container.js';\r\n\r\nclass TableCell extends Block {\r\n  static blotName = 'table';\r\n  static tagName = 'TD';\r\n\r\n  static create(value: string) {\r\n    const node = super.create() as HTMLElement;\r\n    if (value) {\r\n      node.setAttribute('data-row', value);\r\n    } else {\r\n      node.setAttribute('data-row', tableId());\r\n    }\r\n    return node;\r\n  }\r\n\r\n  static formats(domNode: HTMLElement) {\r\n    if (domNode.hasAttribute('data-row')) {\r\n      return domNode.getAttribute('data-row');\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  next: this | null;\r\n\r\n  cellOffset() {\r\n    if (this.parent) {\r\n      return this.parent.children.indexOf(this);\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  format(name: string, value: string) {\r\n    if (name === TableCell.blotName && value) {\r\n      this.domNode.setAttribute('data-row', value);\r\n    } else {\r\n      super.format(name, value);\r\n    }\r\n  }\r\n\r\n  row(): TableRow {\r\n    return this.parent as TableRow;\r\n  }\r\n\r\n  rowOffset() {\r\n    if (this.row()) {\r\n      return this.row().rowOffset();\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  table() {\r\n    return this.row() && this.row().table();\r\n  }\r\n}\r\n\r\nclass TableRow extends Container {\r\n  static blotName = 'table-row';\r\n  static tagName = 'TR';\r\n\r\n  children: LinkedList<TableCell>;\r\n  next: this | null;\r\n\r\n  checkMerge() {\r\n    // @ts-expect-error\r\n    if (super.checkMerge() && this.next.children.head != null) {\r\n      // @ts-expect-error\r\n      const thisHead = this.children.head.formats();\r\n      // @ts-expect-error\r\n      const thisTail = this.children.tail.formats();\r\n      // @ts-expect-error\r\n      const nextHead = this.next.children.head.formats();\r\n      // @ts-expect-error\r\n      const nextTail = this.next.children.tail.formats();\r\n      return (\r\n        thisHead.table === thisTail.table &&\r\n        thisHead.table === nextHead.table &&\r\n        thisHead.table === nextTail.table\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n\r\n  optimize(context: { [key: string]: any }) {\r\n    super.optimize(context);\r\n    this.children.forEach((child) => {\r\n      if (child.next == null) return;\r\n      const childFormats = child.formats();\r\n      const nextFormats = child.next.formats();\r\n      if (childFormats.table !== nextFormats.table) {\r\n        const next = this.splitAfter(child);\r\n        if (next) {\r\n          // @ts-expect-error TODO: parameters of optimize() should be a optional\r\n          next.optimize();\r\n        }\r\n        // We might be able to merge with prev now\r\n        if (this.prev) {\r\n          // @ts-expect-error TODO: parameters of optimize() should be a optional\r\n          this.prev.optimize();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  rowOffset() {\r\n    if (this.parent) {\r\n      return this.parent.children.indexOf(this);\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  table() {\r\n    return this.parent && this.parent.parent;\r\n  }\r\n}\r\n\r\nclass TableBody extends Container {\r\n  static blotName = 'table-body';\r\n  static tagName = 'TBODY';\r\n\r\n  children: LinkedList<TableRow>;\r\n}\r\n\r\nclass TableContainer extends Container {\r\n  static blotName = 'table-container';\r\n  static tagName = 'TABLE';\r\n\r\n  children: LinkedList<TableBody>;\r\n\r\n  balanceCells() {\r\n    const rows = this.descendants(TableRow);\r\n    const maxColumns = rows.reduce((max, row) => {\r\n      return Math.max(row.children.length, max);\r\n    }, 0);\r\n    rows.forEach((row) => {\r\n      new Array(maxColumns - row.children.length).fill(0).forEach(() => {\r\n        let value;\r\n        if (row.children.head != null) {\r\n          value = TableCell.formats(row.children.head.domNode);\r\n        }\r\n        const blot = this.scroll.create(TableCell.blotName, value);\r\n        row.appendChild(blot);\r\n        // @ts-expect-error TODO: parameters of optimize() should be a optional\r\n        blot.optimize(); // Add break blot\r\n      });\r\n    });\r\n  }\r\n\r\n  cells(column: number) {\r\n    return this.rows().map((row) => row.children.at(column));\r\n  }\r\n\r\n  deleteColumn(index: number) {\r\n    // @ts-expect-error\r\n    const [body] = this.descendant(TableBody) as TableBody[];\r\n    if (body == null || body.children.head == null) return;\r\n    body.children.forEach((row) => {\r\n      const cell = row.children.at(index);\r\n      if (cell != null) {\r\n        cell.remove();\r\n      }\r\n    });\r\n  }\r\n\r\n  insertColumn(index: number) {\r\n    // @ts-expect-error\r\n    const [body] = this.descendant(TableBody) as TableBody[];\r\n    if (body == null || body.children.head == null) return;\r\n    body.children.forEach((row) => {\r\n      const ref = row.children.at(index);\r\n      // @ts-expect-error\r\n      const value = TableCell.formats(row.children.head.domNode);\r\n      const cell = this.scroll.create(TableCell.blotName, value);\r\n      row.insertBefore(cell, ref);\r\n    });\r\n  }\r\n\r\n  insertRow(index: number) {\r\n    // @ts-expect-error\r\n    const [body] = this.descendant(TableBody) as TableBody[];\r\n    if (body == null || body.children.head == null) return;\r\n    const id = tableId();\r\n    const row = this.scroll.create(TableRow.blotName) as TableRow;\r\n    body.children.head.children.forEach(() => {\r\n      const cell = this.scroll.create(TableCell.blotName, id);\r\n      row.appendChild(cell);\r\n    });\r\n    const ref = body.children.at(index);\r\n    body.insertBefore(row, ref);\r\n  }\r\n\r\n  rows() {\r\n    const body = this.children.head;\r\n    if (body == null) return [];\r\n    return body.children.map((row) => row);\r\n  }\r\n}\r\n\r\nTableContainer.allowedChildren = [TableBody];\r\nTableBody.requiredContainer = TableContainer;\r\n\r\nTableBody.allowedChildren = [TableRow];\r\nTableRow.requiredContainer = TableBody;\r\n\r\nTableRow.allowedChildren = [TableCell];\r\nTableCell.requiredContainer = TableRow;\r\n\r\nfunction tableId() {\r\n  const id = Math.random().toString(36).slice(2, 6);\r\n  return `row-${id}`;\r\n}\r\n\r\nexport { TableCell, TableRow, TableBody, TableContainer, tableId };\r\n"],"mappings":"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","ignoreList":[]}